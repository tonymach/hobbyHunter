"""
Django settings for hobbyHunter project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

from hobbyHunter.master import master


local = master.local()
externalDb = master.externalDb()

master.loadup()


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_PATH = os.path.realpath(os.path.dirname(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '0%*x#_obi$9ixy02g*dq4+a-yn!&6&h&@nm$dq)9&f#w5(uvwi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['hobbyhunter.ca']

AUTH_USER_MODEL = 'core.User'


# Application definition

INSTALLED_APPS = [


    # External Apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'qrcode',
    'imagekit',

    # Internal Apps
    'merchant',
    'user',
    'search',
    'indexSuggestions',
    'details',
    'transactions',
    'misc',
    'core',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'hobbyHunter.urls'

TEMPLATES = [

    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            PROJECT_PATH + '/../templates/',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
        'context_processors': [
            'django.template.context_processors.debug',
            'django.template.context_processors.request',
            'django.contrib.auth.context_processors.auth',
            'django.contrib.messages.context_processors.messages',
           ],
        },
    },
]
WSGI_APPLICATION = 'hobbyHunter.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

if local and not externalDb:

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'cheq',
            'USER': 'postgres',
            'PASSWORD': 'evil',
            'HOST': 'localhost',
            'PORT': '',
        }
    }

else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'sourdough',
            'USER': 'zombie',
            'PASSWORD': 'aomg2000',
            'HOST': 'breadloaf.ccsemegdheah.us-east-1.rds.amazonaws.com',
            'PORT': '5432',
        }
    }



# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
#
# if not local:
#
#     STATIC_URL = '/static/'
#     STATIC_ROOT =  "/var/www/hobbyhunter/static/"

if local:
    STATIC_URL = '/hay/'

    # STATIC_ROOT = PROJECT_PATH + '/static/'
    STATICFILES_DIRS = [
        BASE_DIR + '/static/'
    ]


#

# STATIC_ROOT = PROJECT_PATH + '/static/'
#
# STATICFILES_DIRS = [
#     BASE_DIR + '/static/'
# ]

if local:
    MEDIA_ROOT = BASE_DIR + "/media/"
    MEDIA_URL = '/oranges/'

INTERNAL_IPS = [
'127.0.0.1'
]



#
#AWS
#

if not local:

    DEFAULT_FILE_STORAGE = "django_s3_storage.storage.S3Storage"
    STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"

    INSTALLED_APPS.append('django_s3_storage')

    # The region to connect to when storing files.
    AWS_REGION = "us-east-1"

    AWS_S3_BUCKET_NAME = 'hobbyhuntermedia'

    # The AWS access key used to access the storage buckets.
    AWS_ACCESS_KEY_ID = "AKIAJPINS54IKETKVYPQ"

    # The AWS secret access key used to access the storage buckets.
    AWS_SECRET_ACCESS_KEY = "X1bLvQo5bAiMsEtKAT0sB19GN4q3/85aJC7k6PuL"

    # The S3 bucket used to store uploaded files.
    AWS_S3_BUCKET_NAME = "hobbyhunter"

    # The S3 calling format to use to connect to the bucket.
    AWS_S3_CALLING_FORMAT = "boto.s3.connection.OrdinaryCallingFormat"

    # The host to connect to (only needed if you are using a non-AWS host)
    AWS_S3_HOST = ""

    # A prefix to add to the start of all uploaded files.
    AWS_S3_KEY_PREFIX = ""

    # Whether to enable querystring authentication for uploaded files.
    AWS_S3_BUCKET_AUTH = True

    # The expire time used to access uploaded files.
    AWS_S3_MAX_AGE_SECONDS = 60*60  # 1 hour.

    # A custom URL prefix to use for public-facing URLs for uploaded files.
    AWS_S3_PUBLIC_URL = ""

    # Whether to set the storage class of uploaded files to REDUCED_REDUNDANCY.
    AWS_S3_REDUCED_REDUNDANCY = False

    # A dictionary of additional metadata to set on the uploaded files.
    # If the value is a callable, it will be called with the path of the file on S3.
    AWS_S3_METADATA = {}

    # Whether to enable gzip compression for uploaded files.
    AWS_S3_GZIP = True

    # The S3 bucket used to store static files.
    AWS_S3_BUCKET_NAME_STATIC = "hobbyhunterstatic"

    # The S3 calling format to use to connect to the static bucket.
    AWS_S3_CALLING_FORMAT_STATIC = "boto.s3.connection.OrdinaryCallingFormat"

    # The host to connect to for static files (only needed if you are using a non-AWS host)
    AWS_S3_HOST_STATIC = ""

    # Whether to enable querystring authentication for static files.
    AWS_S3_BUCKET_AUTH_STATIC = False

    # A prefix to add to the start of all static files.
    AWS_S3_KEY_PREFIX_STATIC = ""

    # The expire time used to access static files.
    AWS_S3_MAX_AGE_SECONDS_STATIC = 60*60*24*365  # 1 year.

    # A custom URL prefix to use for public-facing URLs for static files.
    AWS_S3_PUBLIC_URL_STATIC = ""

    # Whether to set the storage class of static files to REDUCED_REDUNDANCY.
    AWS_S3_REDUCED_REDUNDANCY_STATIC = False

    # A dictionary of additional metadata to set on the static files.
    # If the value is a callable, it will be called with the path of the file on S3.
    AWS_S3_METADATA_STATIC = {}

    # Whether to enable gzip compression for static files.
    AWS_S3_GZIP_STATIC = True
